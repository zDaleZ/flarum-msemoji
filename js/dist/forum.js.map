{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flarum/emoji/webpack/bootstrap","webpack://@flarum/emoji/webpack/runtime/compat get default export","webpack://@flarum/emoji/webpack/runtime/define property getters","webpack://@flarum/emoji/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/emoji/./node_modules/msemoji/dist/msemoji.esm.js","webpack://@flarum/emoji/external root \"flarum.core.compat['common/extend']\"","webpack://@flarum/emoji/external root \"flarum.core.compat['common/components/TextEditor']\"","webpack://@flarum/emoji/external root \"flarum.core.compat['common/components/TextEditorButton']\"","webpack://@flarum/emoji/external root \"flarum.core.compat['forum/utils/KeyboardNavigatable']\"","webpack://@flarum/emoji/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flarum/emoji/external root \"flarum.core.compat['common/Fragment']\"","webpack://@flarum/emoji/./src/forum/fragments/AutocompleteDropdown.js","webpack://@flarum/emoji/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flarum/emoji/./src/forum/helpers/getEmojiIconCode.js","webpack://@flarum/emoji/external root \"flarum.core.compat['app']\"","webpack://@flarum/emoji/./src/forum/options.js","webpack://@flarum/emoji/external root \"flarum.core.compat['common/models/Post']\"","webpack://@flarum/emoji/./src/forum/index.js","webpack://@flarum/emoji/./src/forum/addComposerAutocomplete.js","webpack://@flarum/emoji/./src/forum/renderEmoji.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* Copyright Twitter Inc. and other contributors. Licensed under MIT */\n/* msemoji is modified from twemoji by DaleZ(zDaleZ). Licensed inherits Twemoji. */\n/*jslint indent: 2, browser: true, bitwise: true, plusplus: true */\nvar msemoji = (function (\n  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT *//*\n    https://github.com/twitter/twemoji/blob/gh-pages/LICENSE\n  */\n\n  /*! msemoji is modified from twemoji by DaleZ(zDaleZ). Licensed inherits twemoji. */\n\n  // WARNING:   this file is generated automatically via\n  //            `node scripts/build.js`\n  //            please update its `createmsemoji` function\n  //            at the bottom of the same file instead.\n\n) {\n  'use strict';\n\n  /*jshint maxparams:4 */\n\n  var\n    // the exported module object\n    msemoji = {\n\n\n    /////////////////////////\n    //      properties     //\n    /////////////////////////\n\n      // default assets url\n      base: 'https://raw.githubusercontent.com/zDaleZ/msemoji/main/src/',\n\n      // default assets file extensions, by default '.png'\n      ext: '.png',\n\n      // default assets/folder size, by default \"72x72\"\n      // available via Twitter CDN: 72\n      size: '72x72',\n\n      // default class name, by default 'emoji'\n      className: 'emoji',\n\n      // a new option with msemoji, used to provide high-contrast varient emoji\n      high_contrast: false,\n\n      // provide the current version number in case you need it\n      version: '1.2.0',\n\n      // basic utilities / helpers to convert code points\n      // to JavaScript surrogates and vice versa\n      convert: {\n\n        /**\n         * Given an HEX codepoint, returns UTF16 surrogate pairs.\n         *\n         * @param   string  generic codepoint, i.e. '1F4A9'\n         * @return  string  codepoint transformed into utf16 surrogates pair,\n         *          i.e. \\uD83D\\uDCA9\n         *\n         * @example\n         *  msemoji.convert.fromCodePoint('1f1e8');\n         *  // \"\\ud83c\\udde8\"\n         *\n         *  '1f1e8-1f1f3'.split('-').map(msemoji.convert.fromCodePoint).join('')\n         *  // \"\\ud83c\\udde8\\ud83c\\uddf3\"\n         */\n        fromCodePoint: fromCodePoint,\n\n        /**\n         * Given UTF16 surrogate pairs, returns the equivalent HEX codepoint.\n         *\n         * @param   string  generic utf16 surrogates pair, i.e. \\uD83D\\uDCA9\n         * @param   string  optional separator for double code points, default='-'\n         * @return  string  utf16 transformed into codepoint, i.e. '1F4A9'\n         *\n         * @example\n         *  msemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3');\n         *  // \"1f1e8-1f1f3\"\n         *\n         *  msemoji.convert.toCodePoint('\\ud83c\\udde8\\ud83c\\uddf3', '~');\n         *  // \"1f1e8~1f1f3\"\n         */\n        toCodePoint: toCodePoint\n      },\n\n\n    /////////////////////////\n    //       methods       //\n    /////////////////////////\n\n      /**\n       * User first: used to remove missing images\n       * preserving the original text intent when\n       * a fallback for network problems is desired.\n       * Automatically added to Image nodes via DOM\n       * It could be recycled for string operations via:\n       *  $('img.emoji').on('error', msemoji.onerror)\n       */\n      onerror: function onerror() {\n        if (this.parentNode) {\n          this.parentNode.replaceChild(createText(this.alt, false), this);\n        }\n      },\n\n      /**\n       * Main method/logic to generate either <img> tags or HTMLImage nodes.\n       *  \"emojify\" a generic text or DOM Element.\n       *\n       * @overloads\n       *\n       * String replacement for `innerHTML` or server side operations\n       *  msemoji.parse(string);\n       *  msemoji.parse(string, Function);\n       *  msemoji.parse(string, Object);\n       *\n       * HTMLElement tree parsing for safer operations over existing DOM\n       *  msemoji.parse(HTMLElement);\n       *  msemoji.parse(HTMLElement, Function);\n       *  msemoji.parse(HTMLElement, Object);\n       *\n       * @param   string|HTMLElement  the source to parse and enrich with emoji.\n       *\n       *          string              replace emoji matches with <img> tags.\n       *                              Mainly used to inject emoji via `innerHTML`\n       *                              It does **not** parse the string or validate it,\n       *                              it simply replaces found emoji with a tag.\n       *                              NOTE: be sure this won't affect security.\n       *\n       *          HTMLElement         walk through the DOM tree and find emoji\n       *                              that are inside **text node only** (nodeType === 3)\n       *                              Mainly used to put emoji in already generated DOM\n       *                              without compromising surrounding nodes and\n       *                              **avoiding** the usage of `innerHTML`.\n       *                              NOTE: Using DOM elements instead of strings should\n       *                              improve security without compromising too much\n       *                              performance compared with a less safe `innerHTML`.\n       *\n       * @param   Function|Object  [optional]\n       *                              either the callback that will be invoked or an object\n       *                              with all properties to use per each found emoji.\n       *\n       *          Function            if specified, this will be invoked per each emoji\n       *                              that has been found through the RegExp except\n       *                              those follwed by the invariant \\uFE0E (\"as text\").\n       *                              Once invoked, parameters will be:\n       *\n       *                                iconId:string     the lower case HEX code point\n       *                                                  i.e. \"1f4a9\"\n       *\n       *                                options:Object    all info for this parsing operation\n       *\n       *                                variant:char      the optional \\uFE0F (\"as image\")\n       *                                                  variant, in case this info\n       *                                                  is anyhow meaningful.\n       *                                                  By default this is ignored.\n       *\n       *                              If such callback will return a falsy value instead\n       *                              of a valid `src` to use for the image, nothing will\n       *                              actually change for that specific emoji.\n       *\n       *\n       *          Object              if specified, an object containing the following properties\n       *\n       *            callback   Function  the callback to invoke per each found emoji.\n       *            base       string    the base url, by default msemoji.base\n       *            ext        string    the image extension, by default msemoji.ext\n       *            size       string    the assets size, by default msemoji.size\n       *\n       * @example\n       *\n       *  msemoji.parse(\"I \\u2764\\uFE0F emoji!\");\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"/> emoji!\n       *\n       *\n       *  msemoji.parse(\"I \\u2764\\uFE0F emoji!\", function(iconId, options) {\n       *    return '/assets/' + iconId + '.gif';\n       *  });\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/2764.gif\"/> emoji!\n       *\n       *\n       * msemoji.parse(\"I \\u2764\\uFE0F emoji!\", {\n       *   size: 72,\n       *   callback: function(iconId, options) {\n       *     return '/assets/' + options.size + '/' + iconId + options.ext;\n       *   }\n       * });\n       *  // I <img class=\"emoji\" draggable=\"false\" alt=\"❤️\" src=\"/assets/72x72/2764.png\"/> emoji!\n       *\n       */\n      parse: parse,\n\n      /**\n       * Given a string, invokes the callback argument\n       *  per each emoji found in such string.\n       * This is the most raw version used by\n       *  the .parse(string) method itself.\n       *\n       * @param   string    generic string to parse\n       * @param   Function  a generic callback that will be\n       *                    invoked to replace the content.\n       *                    This callback will receive standard\n       *                    String.prototype.replace(str, callback)\n       *                    arguments such:\n       *  callback(\n       *    rawText,  // the emoji match\n       *  );\n       *\n       *                    and others commonly received via replace.\n       */\n      replace: replace,\n\n      /**\n       * Simplify string tests against emoji.\n       *\n       * @param   string  some text that might contain emoji\n       * @return  boolean true if any emoji was found, false otherwise.\n       *\n       * @example\n       *\n       *  if (msemoji.test(someContent)) {\n       *    console.log(\"emoji All The Things!\");\n       *  }\n       */\n      test: test\n    },\n\n    // used to escape HTML special chars in attributes\n    escaper = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      \"'\": '&#39;',\n      '\"': '&quot;'\n    },\n\n    // RegExp based on emoji's official Unicode standards\n    // http://www.unicode.org/Public/UNIDATA/EmojiSources.txt\n    re = /[#*0-9]\\u20E3|[\\u261D\\u270A-\\u270D](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26A7\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u26FD\\u2702\\u2705\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\u26D3(?:\\uFE0F\\u200D\\uD83D\\uDCA5)?|\\u26F9(?:\\uD83C[\\uDFFB-\\uDFFF](?:\\u200D[\\u2640\\u2642]\\uFE0F)?|\\uFE0F\\u200D[\\u2640\\u2642]\\uFE0F)?|\\u2764(?:\\uFE0F\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F)?|[\\uDFCB\\uDFCC](?:\\uD83C[\\uDFFB-\\uDFFF](?:\\u200D[\\u2640\\u2642]\\uFE0F)?|\\uFE0F\\u200D[\\u2640\\u2642]\\uFE0F)?|[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF43\\uDF45-\\uDF4A\\uDF4C-\\uDF84\\uDF86-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCD-\\uDFF0\\uDFF5\\uDFF7-\\uDFFA]|\\uDF44(?:\\u200D\\uD83D\\uDFEB)?|\\uDF4B(?:\\u200D\\uD83D\\uDFE9)?|\\uDFC3(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F(?:\\u200D\\u27A1\\uFE0F)?|\\u27A1\\uFE0F))?|\\uDFF3(?:\\uFE0F\\u200D(?:\\u26A7\\uFE0F|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F)?)|\\uD83D(?:[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC68\\uDC69](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F)?|[\\uDDB0-\\uDDB3])))?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4\\uDEB5](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F)?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE41\\uDE43\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDECB\\uDECD-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC08(?:\\u200D\\u2B1B)?|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC26(?:\\u200D(?:\\u2B1B|\\uD83D\\uDD25))?|\\uDC3B(?:\\u200D\\u2744\\uFE0F)?|\\uDC41(?:\\u200D\\uD83D\\uDDE8)?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F)?|\\uDD75(?:\\uD83C[\\uDFFB-\\uDFFF](?:\\u200D[\\u2640\\u2642]\\uFE0F)?|\\uFE0F\\u200D[\\u2640\\u2642]\\uFE0F)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F)?|\\uDE42(?:\\u200D[\\u2194\\u2195]\\uFE0F)?|\\uDEB6(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F(?:\\u200D\\u27A1\\uFE0F)?|\\u27A1\\uFE0F))?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F)?|[\\uDD3C\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD1D\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDAF\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDDCE(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F(?:\\u200D\\u27A1\\uFE0F)?|\\u27A1\\uFE0F))?|\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F)?|[\\uDDB0-\\uDDB3])))?)/g,\n\n    // avoid runtime RegExp creation for not so smart,\n    // not JIT based, and old browsers / engines\n    UFE0Fg = /\\uFE0F/g,\n\n    // avoid using a string literal like '\\u200D' here because minifiers expand it inline\n    U200D = String.fromCharCode(0x200D),\n\n    // used to find HTML special chars in attributes\n    rescaper = /[&<>'\"]/g,\n\n    // nodes with type 1 which should **not** be parsed\n    shouldntBeParsed = /^(?:iframe|noframes|noscript|script|select|style|textarea)$/,\n\n    // just a private shortcut\n    fromCharCode = String.fromCharCode;\n\n  return msemoji;\n\n\n  /////////////////////////\n  //  private functions  //\n  //     declaration     //\n  /////////////////////////\n\n  /**\n   * Shortcut to create text nodes\n   * @param   string  text used to create DOM text node\n   * @return  Node  a DOM node with that text\n   */\n  function createText(text, clean) {\n    return document.createTextNode(clean ? text.replace(UFE0Fg, '') : text);\n  }\n\n  /**\n   * Utility function to escape html attribute text\n   * @param   string  text use in HTML attribute\n   * @return  string  text encoded to use in HTML attribute\n   */\n  function escapeHTML(s) {\n    return s.replace(rescaper, replacer);\n  }\n\n  /**\n   * Default callback used to generate emoji src\n   *  based on Twitter CDN\n   * @param   string    the emoji codepoint string\n   * @param   string    the default size to use, i.e. \"36x36\"\n   * @return  string    the image source to use\n   */\n  function defaultImageSrcGenerator(icon, options) {\n    return ''.concat(options.base, options.size, '/', icon, options.ext);\n  }\n\n  /**\n   * Given a generic DOM nodeType 1, walk through all children\n   * and store every nodeType 3 (#text) found in the tree.\n   * @param   Element a DOM Element with probably some text in it\n   * @param   Array the list of previously discovered text nodes\n   * @return  Array same list with new discovered nodes, if any\n   */\n  function grabAllTextNodes(node, allText) {\n    var\n      childNodes = node.childNodes,\n      length = childNodes.length,\n      subnode,\n      nodeType;\n    while (length--) {\n      subnode = childNodes[length];\n      nodeType = subnode.nodeType;\n      // parse emoji only in text nodes\n      if (nodeType === 3) {\n        // collect them to process emoji later\n        allText.push(subnode);\n      }\n      // ignore all nodes that are not type 1, that are svg, or that\n      // should not be parsed as script, style, and others\n      else if (nodeType === 1 && !('ownerSVGElement' in subnode) &&\n          !shouldntBeParsed.test(subnode.nodeName.toLowerCase())) {\n        grabAllTextNodes(subnode, allText);\n      }\n    }\n    return allText;\n  }\n\n  /**\n   * Used to both remove the possible variant\n   *  and to convert utf16 into code points.\n   *  If there is a zero-width-joiner (U+200D), leave the variants in.\n   * @param   string    the raw text of the emoji match\n   * @return  string    the code point\n   */\n  function grabTheRightIcon(rawText) {\n    // if variant is present as \\uFE0F\n    return toCodePoint(rawText.indexOf(U200D) < 0 ?\n      rawText.replace(UFE0Fg, '') :\n      rawText\n    );\n  }\n\n  /**\n   * DOM version of the same logic / parser:\n   *  emojify all found sub-text nodes placing images node instead.\n   * @param   Element   generic DOM node with some text in some child node\n   * @param   Object    options  containing info about how to parse\n    *\n    *            .callback   Function  the callback to invoke per each found emoji.\n    *            .base       string    the base url, by default msemoji.base\n    *            .ext        string    the image extension, by default msemoji.ext\n    *            .size       string    the assets size, by default msemoji.size\n    *\n   * @return  Element same generic node with emoji in place, if any.\n   */\n  function parseNode(node, options) {\n    var\n      allText = grabAllTextNodes(node, []),\n      length = allText.length,\n      attrib,\n      attrname,\n      modified,\n      fragment,\n      subnode,\n      text,\n      match,\n      i,\n      index,\n      img,\n      rawText,\n      iconId,\n      src;\n    while (length--) {\n      modified = false;\n      fragment = document.createDocumentFragment();\n      subnode = allText[length];\n      text = subnode.nodeValue;\n      i = 0;\n      while ((match = re.exec(text))) {\n        index = match.index;\n        if (index !== i) {\n          fragment.appendChild(\n            createText(text.slice(i, index), true)\n          );\n        }\n        rawText = match[0];\n        iconId = grabTheRightIcon(rawText);\n        i = index + rawText.length;\n        src = options.callback(iconId, options);\n        if (iconId && src) {\n          img = new Image();\n          img.onerror = options.onerror;\n          img.setAttribute('draggable', 'false');\n          attrib = options.attributes(rawText, iconId);\n          for (attrname in attrib) {\n            if (\n              attrib.hasOwnProperty(attrname) &&\n              // don't allow any handlers to be set + don't allow overrides\n              attrname.indexOf('on') !== 0 &&\n              !img.hasAttribute(attrname)\n            ) {\n              img.setAttribute(attrname, attrib[attrname]);\n            }\n          }\n          img.className = options.className;\n          img.alt = rawText;\n          // if high-contrast mode is enable, then remove skin tone modifiers.\n          img.src = options.high_contrast ? src.replace(/-1f3f[bcdef]/g,'') : src;\n          modified = true;\n          fragment.appendChild(img);\n        }\n        if (!img) fragment.appendChild(createText(rawText, false));\n        img = null;\n      }\n      // is there actually anything to replace in here ?\n      if (modified) {\n        // any text left to be added ?\n        if (i < text.length) {\n          fragment.appendChild(\n            createText(text.slice(i), true)\n          );\n        }\n        // replace the text node only, leave intact\n        // anything else surrounding such text\n        subnode.parentNode.replaceChild(fragment, subnode);\n      }\n    }\n    return node;\n  }\n\n  /**\n   * String/HTML version of the same logic / parser:\n   *  emojify a generic text placing images tags instead of surrogates pair.\n   * @param   string    generic string with possibly some emoji in it\n   * @param   Object    options  containing info about how to parse\n   *\n   *            .callback   Function  the callback to invoke per each found emoji.\n   *            .base       string    the base url, by default msemoji.base\n   *            .ext        string    the image extension, by default msemoji.ext\n   *            .size       string    the assets size, by default msemoji.size\n   *\n   * @return  the string with <img tags> replacing all found and parsed emoji\n   */\n  function parseString(str, options) {\n    return replace(str, function (rawText) {\n      var\n        ret = rawText,\n        iconId = grabTheRightIcon(rawText),\n        // if high-contrast mode is enable, then remove skin tone modifiers.\n        src = options.callback(options.high_contrast ? iconId.replace(/-1f3f[bcdef]/g,'') : iconId, options),\n        attrib,\n        attrname;\n      if (iconId && src) {\n        // recycle the match string replacing the emoji\n        // with its image counter part\n        ret = '<img '.concat(\n          'class=\"', options.className, '\" ',\n          'draggable=\"false\" ',\n          // needs to preserve user original intent\n          // when variants should be copied and pasted too\n          'alt=\"',\n          rawText,\n          '\"',\n          ' src=\"',\n          src,\n          '\"'\n        );\n        attrib = options.attributes(rawText, iconId);\n        for (attrname in attrib) {\n          if (\n            attrib.hasOwnProperty(attrname) &&\n            // don't allow any handlers to be set + don't allow overrides\n            attrname.indexOf('on') !== 0 &&\n            ret.indexOf(' ' + attrname + '=') === -1\n          ) {\n            ret = ret.concat(' ', attrname, '=\"', escapeHTML(attrib[attrname]), '\"');\n          }\n        }\n        ret = ret.concat('/>');\n      }\n      return ret;\n    });\n  }\n\n  /**\n   * Function used to actually replace HTML special chars\n   * @param   string  HTML special char\n   * @return  string  encoded HTML special char\n   */\n  function replacer(m) {\n    return escaper[m];\n  }\n\n  /**\n   * Default options.attribute callback\n   * @return  null\n   */\n  function returnNull() {\n    return null;\n  }\n\n  /**\n   * Given a generic value, creates its squared counterpart if it's a number.\n   *  As example, number 36 will return '36x36'.\n   * @param   any     a generic value.\n   * @return  any     a string representing asset size, i.e. \"36x36\"\n   *                  only in case the value was a number.\n   *                  Returns initial value otherwise.\n   */\n  function toSizeSquaredAsset(value) {\n    return typeof value === 'number' ?\n      value + 'x' + value :\n      value;\n  }\n\n\n  /////////////////////////\n  //  exported functions //\n  //     declaration     //\n  /////////////////////////\n\n  function fromCodePoint(codepoint) {\n    var code = typeof codepoint === 'string' ?\n          parseInt(codepoint, 16) : codepoint;\n    if (code < 0x10000) {\n      return fromCharCode(code);\n    }\n    code -= 0x10000;\n    return fromCharCode(\n      0xD800 + (code >> 10),\n      0xDC00 + (code & 0x3FF)\n    );\n  }\n\n  function parse(what, how) {\n    if (!how || typeof how === 'function') {\n      how = {callback: how};\n    }\n    // if first argument is string, inject html <img> tags\n    // otherwise use the DOM tree and parse text nodes only\n    return (typeof what === 'string' ? parseString : parseNode)(what, {\n      callback:   how.callback || defaultImageSrcGenerator,\n      attributes: typeof how.attributes === 'function' ? how.attributes : returnNull,\n      base:       typeof how.base === 'string' ? how.base : msemoji.base,\n      ext:        how.ext || msemoji.ext,\n      size:       how.folder || toSizeSquaredAsset(how.size || msemoji.size),\n      className:  how.className || msemoji.className,\n      onerror:    how.onerror || msemoji.onerror\n    });\n  }\n\n  function replace(text, callback) {\n    return String(text).replace(re, callback);\n  }\n\n  function test(text) {\n    // IE6 needs a reset before too\n    re.lastIndex = 0;\n    var result = re.test(text);\n    re.lastIndex = 0;\n    return result;\n  }\n\n  function toCodePoint(unicodeSurrogates, sep) {\n    var\n      r = [],\n      c = 0,\n      p = 0,\n      i = 0;\n    while (i < unicodeSurrogates.length) {\n      c = unicodeSurrogates.charCodeAt(i++);\n      if (p) {\n        r.push((0x10000 + ((p - 0xD800) << 10) + (c - 0xDC00)).toString(16));\n        p = 0;\n      } else if (0xD800 <= c && c <= 0xDBFF) {\n        p = c;\n      } else {\n        r.push(c.toString(16));\n      }\n    }\n    return r.join(sep || '-');\n  }\n\n}());\nexport default msemoji;","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/TextEditor'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/TextEditorButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/KeyboardNavigatable'];","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Fragment'];","import Fragment from 'flarum/common/Fragment';\n\nexport default class AutocompleteDropdown extends Fragment {\n  items = [];\n  active = false;\n  index = 0;\n  keyWasJustPressed = false;\n\n  view() {\n    return (\n      <ul className=\"Dropdown-menu EmojiDropdown\">\n        <li className=\"Dropdown-header\">{app.translator.trans('flarum-msemoji.forum.composer.type_to_search_text')}</li>\n        {this.items.map((item) => (\n          <li key={item.attrs.key}>{item}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  show(left, top) {\n    this.$()\n      .show()\n      .css({\n        left: left + 'px',\n        top: top + 'px',\n      });\n    this.active = true;\n  }\n\n  hide() {\n    this.$().hide();\n    this.active = false;\n  }\n\n  navigate(delta) {\n    this.keyWasJustPressed = true;\n    this.setIndex(this.index + delta, true);\n    clearTimeout(this.keyWasJustPressedTimeout);\n    this.keyWasJustPressedTimeout = setTimeout(() => (this.keyWasJustPressed = false), 500);\n  }\n\n  complete() {\n    this.$('li:not(.Dropdown-header)').eq(this.index).find('button').click();\n  }\n\n  setIndex(index, scrollToItem) {\n    if (this.keyWasJustPressed && !scrollToItem) return;\n\n    const $dropdown = this.$();\n    const $items = $dropdown.find('li:not(.Dropdown-header)');\n    let rangedIndex = index;\n\n    if (rangedIndex < 0) {\n      rangedIndex = $items.length - 1;\n    } else if (rangedIndex >= $items.length) {\n      rangedIndex = 0;\n    }\n\n    this.index = rangedIndex;\n\n    const $item = $items.removeClass('active').eq(rangedIndex).addClass('active');\n\n    if (scrollToItem) {\n      const dropdownScroll = $dropdown.scrollTop();\n      const dropdownTop = $dropdown.offset().top;\n      const dropdownBottom = dropdownTop + $dropdown.outerHeight();\n      const itemTop = $item.offset().top;\n      const itemBottom = itemTop + $item.outerHeight();\n\n      let scrollTop;\n      if (itemTop < dropdownTop) {\n        scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n      } else if (itemBottom > dropdownBottom) {\n        scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n      }\n\n      if (typeof scrollTop !== 'undefined') {\n        $dropdown.stop(true).animate({ scrollTop }, 100);\n      }\n    }\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","/*! Copyright Twitter Inc. and other contributors. Licensed under MIT */ /*\n  https://github.com/twitter/twemoji/blob/gh-pages/LICENSE\n*/\n\nimport msemoji from 'msemoji';\n\n// avoid using a string literal like '\\u200D' here because minifiers expand it inline\nconst U200D = String.fromCharCode(0x200d);\n\n// avoid runtime RegExp creation for not so smart,\n// not JIT based, and old browsers / engines\nconst UFE0Fg = /\\uFE0F/g;\n\n/**\n * Used to both remove the possible variant\n *  and to convert utf16 into code points.\n *  If there is a zero-width-joiner (U+200D), leave the variants in.\n * @param   string    the raw text of the emoji match\n * @return  string    the code point\n */\nexport default function getEmojiIconCode(emoji) {\n  return msemoji.convert.toCodePoint(emoji.indexOf(U200D) < 0 ? emoji.replace(UFE0Fg, '') : emoji);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['app'];","import app from 'flarum/app';\n\nimport msemoji from 'msemoji';\n\nexport const version = msemoji.version[0];\n\nexport default function (n) {\n    switch (n) {\n        default: case 0:\n            return app.forum.attribute(\"flarum-msemoji.base\") ?\n            app.forum.attribute(\"flarum-msemoji.base\").replace('${Version}', version) :\n            msemoji.base;\n            break;\n\n        case 1:\n            return app.forum.attribute(\"flarum-msemoji.folder\");\n            break;\n\n        case 2:\n            return app.forum.attribute(\"flarum-msemoji.ext\");\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Post'];","import addComposerAutocomplete from './addComposerAutocomplete';\nimport renderEmoji from './renderEmoji';\n\napp.initializers.add('flarum-msemoji', () => {\n  // After typing ':' in the composer, show a dropdown suggesting a bunch of\n  // emoji that the user could use.\n  new Promise(function (resolve) {\n    var id = setInterval(function () {\n      if (app.forum) {\n        if (app.forum.attribute) {\n          clearInterval(id);\n          resolve();\n        }\n      }\n    }, 500)\n  }).then(function () {\n    if (app.forum.attribute(\"flarum-msemoji.disable_autocomplete\") != '1') addComposerAutocomplete();\n  })\n\n  // render emoji as image in Posts content and title.\n  renderEmoji();\n});\n","import msemoji from 'msemoji';\nimport emojiMap from 'simple-emoji-map';\n\nimport { extend } from 'flarum/common/extend';\nimport TextEditor from 'flarum/common/components/TextEditor';\nimport TextEditorButton from 'flarum/common/components/TextEditorButton';\nimport KeyboardNavigatable from 'flarum/forum/utils/KeyboardNavigatable';\n\nimport AutocompleteDropdown from './fragments/AutocompleteDropdown';\nimport getEmojiIconCode from './helpers/getEmojiIconCode';\nimport getoption from './options';\n\nexport default function addComposerAutocomplete() {\n  const emojiKeys = Object.keys(emojiMap);\n  const $container = $('<div class=\"ComposerBody-emojiDropdownContainer\"></div>');\n  const dropdown = new AutocompleteDropdown();\n\n  extend(TextEditor.prototype, 'oncreate', function () {\n    const $editor = this.$('.TextEditor-editor').wrap('<div class=\"ComposerBody-emojiWrapper\"></div>');\n\n    this.navigator = new KeyboardNavigatable();\n    this.navigator\n      .when(() => dropdown.active)\n      .onUp(() => dropdown.navigate(-1))\n      .onDown(() => dropdown.navigate(1))\n      .onSelect(dropdown.complete.bind(dropdown))\n      .onCancel(dropdown.hide.bind(dropdown))\n      .bindTo($editor);\n\n    $editor.after($container);\n  });\n\n  extend(TextEditor.prototype, 'buildEditorParams', function (params) {\n    let relEmojiStart;\n    let absEmojiStart;\n    let typed;\n\n    const applySuggestion = (replacement) => {\n      this.attrs.composer.editor.replaceBeforeCursor(absEmojiStart - 1, replacement + ' ');\n\n      dropdown.hide();\n    };\n\n    params.inputListeners.push(() => {\n      const selection = this.attrs.composer.editor.getSelectionRange();\n\n      const cursor = selection[0];\n\n      if (selection[1] - cursor > 0) return;\n\n      // Search backwards from the cursor for an ':' symbol. If we find\n      // one and followed by a whitespace, we will want to show the\n      // autocomplete dropdown!\n      const lastChunk = this.attrs.composer.editor.getLastNChars(15);\n      absEmojiStart = 0;\n      for (let i = lastChunk.length - 1; i >= 0; i--) {\n        const character = lastChunk.substr(i, 1);\n        // check what user typed, emoji names only contains alphanumeric,\n        // underline, '+' and '-'\n        if (!/[a-z0-9]|\\+|\\-|_|\\:/.test(character)) break;\n        // make sure ':' preceded by a whitespace or newline\n        if (character === ':' && (i == 0 || /\\s/.test(lastChunk.substr(i - 1, 1)))) {\n          relEmojiStart = i + 1;\n          absEmojiStart = cursor - lastChunk.length + i + 1;\n          break;\n        }\n      }\n\n      dropdown.hide();\n      dropdown.active = false;\n\n      if (absEmojiStart) {\n        typed = lastChunk.substring(relEmojiStart).toLowerCase();\n\n        const makeSuggestion = function ({ emoji, name, code }) {\n          return (\n            <button\n              key={emoji}\n              onclick={() => applySuggestion(emoji)}\n              onmouseenter={function () {\n                dropdown.setIndex($(this).parent().index() - 1);\n              }}\n            >\n              <img alt={emoji} class=\"emoji\" draggable=\"false\" loading=\"lazy\" src={`${getoption()}${getoption(1) || msemoji.size}/${code}${getoption(2) || msemoji.ext}`} />\n              {name}\n            </button>\n          );\n        };\n\n        const buildSuggestions = () => {\n          const similarEmoji = [];\n\n          // Build a regular expression to do a fuzzy match of the given input string\n          const fuzzyRegexp = function (str) {\n            const reEscape = new RegExp('\\\\(([' + '+.*?[]{}()^$|\\\\'.replace(/(.)/g, '\\\\$1') + '])\\\\)', 'g');\n            return new RegExp('(.*)' + str.toLowerCase().replace(/(.)/g, '($1)(.*?)').replace(reEscape, '(\\\\$1)') + '$', 'i');\n          };\n          const regTyped = fuzzyRegexp(typed);\n\n          let maxSuggestions = 7;\n\n          const findMatchingEmojis = (matcher) => {\n            for (let i = 0; i < emojiKeys.length && maxSuggestions > 0; i++) {\n              const curEmoji = emojiKeys[i];\n\n              if (similarEmoji.indexOf(curEmoji) === -1) {\n                const names = emojiMap[curEmoji];\n                for (let name of names) {\n                  if (matcher(name)) {\n                    --maxSuggestions;\n                    similarEmoji.push(curEmoji);\n                    break;\n                  }\n                }\n              }\n            }\n          };\n\n          // First, try to find all emojis starting with the given string\n          findMatchingEmojis((emoji) => emoji.indexOf(typed) === 0);\n\n          // If there are still suggestions left, try for some fuzzy matches\n          findMatchingEmojis((emoji) => regTyped.test(emoji));\n\n          const suggestions = similarEmoji\n            .map((emoji) => ({\n              emoji,\n              name: emojiMap[emoji][0],\n              code: getEmojiIconCode(emoji),\n            }))\n            .map(makeSuggestion);\n\n          if (suggestions.length) {\n            dropdown.items = suggestions;\n            m.render($container[0], dropdown.render());\n\n            dropdown.show();\n            const coordinates = this.attrs.composer.editor.getCaretCoordinates(absEmojiStart);\n            const width = dropdown.$().outerWidth();\n            const height = dropdown.$().outerHeight();\n            const parent = dropdown.$().offsetParent();\n            let left = coordinates.left;\n            let top = coordinates.top + 15;\n\n            // Keep the dropdown inside the editor.\n            if (top + height > parent.height()) {\n              top = coordinates.top - height - 15;\n            }\n            if (left + width > parent.width()) {\n              left = parent.width() - width;\n            }\n\n            // Prevent the dropdown from going off screen on mobile\n            top = Math.max(-(parent.offset().top - $(document).scrollTop()), top);\n            left = Math.max(-parent.offset().left, left);\n\n            dropdown.show(left, top);\n          }\n        };\n\n        buildSuggestions();\n\n        dropdown.setIndex(0);\n        dropdown.$().scrollTop(0);\n        dropdown.active = true;\n      }\n    });\n  });\n\n  extend(TextEditor.prototype, 'toolbarItems', function (items) {\n    items.add(\n      'emoji',\n      <TextEditorButton onclick={() => this.attrs.composer.editor.insertAtCursor(' :')} icon=\"far fa-smile\">\n        {app.translator.trans('flarum-msemoji.forum.composer.emoji_tooltip')}\n      </TextEditorButton>\n    );\n  });\n}\n","import msemoji from 'msemoji';\n\nimport { override } from 'flarum/common/extend';\nimport Post from 'flarum/common/models/Post';\n\nimport getoption from './options';\n\n/**\n * Parses an HTML string into a `<body>` node containing the HTML content.\n *\n * Vanilla JS implementation of jQuery's `$.parseHTML()`,\n * sourced from http://youmightnotneedjquery.com/\n */\nfunction parseHTML(str) {\n  const tmp = document.implementation.createHTMLDocument();\n  tmp.body.innerHTML = str;\n  return tmp.body;\n}\n\nexport default function renderEmoji() {\n  override(Post.prototype, 'contentHtml', function (original) {\n    const contentHtml = original();\n\n    if (this.oldContentHtml !== contentHtml) {\n      // We need to parse the HTML string into a DOM node, then give it to Twemoji.\n      //\n      // This prevents some issues with the default find-replace that would be performed\n      // on a string passed to `Twemoji.parse()`.\n      //\n      // The parse function can only handle a single DOM node provided, so we need to\n      // wrap it in a node. In our `parseHTML` implementation, we wrap it in a `<body>`\n      // element. This gets stripped below.\n      //\n      // See https://github.com/flarum/core/issues/2958\n      const emojifiedDom = msemoji.parse(parseHTML(contentHtml), {\n        base: getoption(),\n        folder: getoption(1),\n        ext: getoption(2),\n        attributes: () => ({\n          loading: 'lazy',\n        }),\n      });\n\n      // Steal the HTML string inside the emojified DOM `<body>` tag.\n      this.emojifiedContentHtml = emojifiedDom.innerHTML;\n\n      this.oldContentHtml = contentHtml;\n    }\n\n    return this.emojifiedContentHtml;\n  });\n\n  override(s9e.TextFormatter, 'preview', (original, text, element) => {\n    original(text, element);\n\n    msemoji.parse(element, {\n      base: getoption(),\n      folder: getoption(1),\n      ext: getoption(2),\n      attributes: () => ({\n        loading: 'lazy',\n      }),\n    });\n  });\n}"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","msemoji","base","ext","size","className","high_contrast","version","convert","fromCodePoint","codepoint","code","parseInt","fromCharCode","toCodePoint","onerror","this","parentNode","replaceChild","createText","alt","parse","what","how","callback","parseString","parseNode","defaultImageSrcGenerator","attributes","returnNull","folder","value","replace","test","text","re","lastIndex","result","escaper","UFE0Fg","U200D","String","rescaper","shouldntBeParsed","clean","document","createTextNode","escapeHTML","s","replacer","icon","options","concat","grabAllTextNodes","node","allText","subnode","nodeType","childNodes","length","push","nodeName","toLowerCase","grabTheRightIcon","rawText","indexOf","attrib","attrname","modified","fragment","match","i","index","img","iconId","src","createDocumentFragment","nodeValue","exec","appendChild","slice","Image","setAttribute","hasAttribute","str","ret","m","unicodeSurrogates","sep","r","c","p","charCodeAt","toString","join","flarum","core","compat","_setPrototypeOf","t","e","setPrototypeOf","bind","__proto__","AutocompleteDropdown","_Fragment","_this","_len","arguments","args","Array","_key","apply","items","active","keyWasJustPressed","create","constructor","_proto","view","app","translator","trans","map","item","attrs","show","left","top","$","css","hide","navigate","delta","_this2","setIndex","clearTimeout","keyWasJustPressedTimeout","setTimeout","complete","eq","find","click","scrollToItem","$dropdown","$items","rangedIndex","$item","removeClass","addClass","scrollTop","dropdownScroll","dropdownTop","offset","dropdownBottom","outerHeight","itemTop","itemBottom","stop","animate","Fragment","getEmojiIconCode","emoji","n","attribute","initializers","add","Promise","resolve","id","setInterval","forum","clearInterval","then","emojiKeys","$container","dropdown","keys","emojiMap","extend","TextEditor","$editor","wrap","navigator","KeyboardNavigatable","when","onUp","onDown","onSelect","onCancel","bindTo","after","params","relEmojiStart","absEmojiStart","typed","inputListeners","selection","composer","editor","getSelectionRange","cursor","lastChunk","getLastNChars","character","substr","substring","makeSuggestion","_ref","name","onclick","replacement","replaceBeforeCursor","onmouseenter","parent","class","draggable","loading","getoption","reEscape","similarEmoji","regTyped","RegExp","maxSuggestions","findMatchingEmojis","matcher","curEmoji","_step","_iterator","_createForOfIteratorHelperLoose","done","suggestions","render","coordinates","getCaretCoordinates","width","outerWidth","height","offsetParent","Math","max","buildSuggestions","TextEditorButton","insertAtCursor","override","Post","original","tmp","contentHtml","oldContentHtml","emojifiedDom","implementation","createHTMLDocument","body","innerHTML","emojifiedContentHtml","s9e","TextFormatter","element"],"sourceRoot":""}